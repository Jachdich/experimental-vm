#!/usr/bin/python3
#from assembler import assembler, definition_stackvm
import re, sys

header = """global    _start
section   .text
_start:
        mov     rdx,    rsp
"""

print_asm = """
print:
        mov     rax,    1
        mov     rdi,    1
        mov     rdx,    1
        syscall
        ret

"""

footer = """
        mov     rax,    60
        xor     rdi,    rdi
        syscall
"""

definitions = "section .data\n"

def error(desc):
    sys.stderr.write(desc + "\n")
    sys.exit(1)

def warn(desc):
    sys.stderr.write(desc + "\n")

class Function:
    def __init__(self, value, args, code, varmaps):
        self.value = value
        self.args = args
        self.code = code
        self.varmaps = varmaps

    def __add__(self, other):
        return self.value + other

    def __str__(self):
        return self.value

    def __repr__(self):
        return f"Function('{self.code}')"

    def __hash__(self):
        return hash(self.value)

    def __eq__(self, other):
        if isinstance(other, Function):
            return self.value == other.value
        else:
            return self.value == other
    
    def __ne__(self, other):
        return not(self == other)
    
class Reader:
    RE_PATTERN = r"""[\s,]*(~@|[\[\]{}()'`~^@]|"(?:[\\].|[^\\"])*"?|;.*|[^\s\[\]{}()'"`@,;]+)"""
    def __init__(self, txt=None, tokens=None):
        self.txt = txt
        self.pos = 0
        if tokens != None:
            self.tokens = tokens
        else:
            self.tokens = self.tokenise(self.txt)

    def tokenise(self, s):
        tre = re.compile(Reader.RE_PATTERN);
        return [t for t in re.findall(tre, s) if t[0] != ';']

    def print_ast(self, obj):
        if type(obj) == type(str()):
            return obj
        if type(obj) == type(int()):
            return str(obj)
        if type(obj) == type(list()):
            return "(" + " ".join([print_ast(x) for x in obj]) + ")"

    def atom(self, token):
        int_re = re.compile(r"-?[0-9]+$")
        float_re = re.compile(r"-?[0-9][0-9.]*$")
        string_re = re.compile(r'"(?:[\\].|[^\\"])*"')
        if re.match(int_re, token): return int(token)
        elif re.match(float_re, token): return float(token)
        elif re.match(string_re, token): return token
        elif token == "nil": return None
        elif token == "true": return True
        elif token == "false": return False
        else: return str(token) #todo: symbol

    def next(self):
        self.pos += 1
        return self.tokens[self.pos - 1]
    
    def peek(self, pos=None):
        if pos == None:
            return self.tokens[self.pos]
        return self.tokens[pos]
        
def parse(reader):
    out = []
    if reader.peek() == "(":
        #if tokens[0] != "(": raise SyntaxError()
        if reader.peek(-1) != ")": error("Syntax error: Expected ')' to close '('")
        reader.tokens = reader.tokens[1:-1]
        
    while reader.pos < len(reader.tokens):
        if reader.peek() == "(":
            reader.next()
            
            num_left = 0
            num_right = 0
            inside_param = []
            while not num_right > num_left:
                if reader.pos == len(reader.tokens):
                    error("Syntax error: Expected ')' (to closee '(')")
                if reader.peek() == "(":
                    num_left += 1
                elif reader.peek() == ")":
                    num_right += 1
                inside_param.append(reader.next())
                
            out.append(parse(Reader(tokens=inside_param[:-1])))

        elif reader.peek() != ")":
            out.append(reader.atom(reader.next()))
        else:
            #skip over rparan
            reader.next()

    if len(out) == 1:
        return out[0]
    else:
        return out

def intToBytes(x):
    x = int(x) #Workaround for negetive numvers, FIX
    return [
        (x >> 24) & 0xFF,
        (x >> 16) & 0xFF,
        (x >> 8 ) & 0xFF,
        x & 0xFF]

def doEscapes(x):
    out = ""
    escapeNext = False
    for c in x:
        if escapeNext:
            if c == "\\":
                out += "\\"
            elif c == "n":
                out += "\n"
            else:
                error(f"Syntax error: Invalid escape sequence '{x}'")
            escapeNext = False
            continue
        if c == "\\":
            escapeNext = True
            continue
        out += c
    return out

class Compiler:
    def __init__(self, code):
        self.func = {
        "+": "        pop     rax\n        pop     rbx\n        add     rax,    rbx\n        push    rax",
        "-": "        pop     rax\n        pop     rbx\n        sub     rax,    rbx\n        push    rax",
        "==": "        pop     rax\n        pop     rbx\n        cmp     rax,    rbx",
        "<": "        lt",
        ">": "        gt",
        "<=":"        lteq",
        ">=": "        gteq",
        "ret": "        pop     r9",
        "print": "        mov     rsi,    rsp\n        call    print\n        add     rsp,    8"#"pop rsi\ncall print",
        }

        self.global_vars = []
        self.funcasm = []
        self.code = code
        self.last_label = 0

    def genNewLabel(self):
        self.last_label += 1
        return "label" + str(self.last_label)

    def expr(self, ast, varmaps=None):
        if varmaps == None: varmaps = {}
        if type(ast) == list:
            out = []
            for x in ast:
                asm, varmaps = self.genCode(x, varmaps)
                out.append(asm)
            return out
        elif type(ast) == int:
            return "        push    " + str(ast)
            #lab = self.genNewLabel()
            #global definitions
            #definitions += lab + ": db " + str(ast)
            #return "push " + lab
        elif type(ast) == str and ast[0] == "\"":
            lab = self.genNewLabel()
            global definitions
            definitions += lab + ": db " + ast + ", 0"
            #definitions += ""
            return "        push " + lab
            
        elif type(ast) == str:
            if ast in varmaps:
                if isinstance(varmaps[ast], Function):
                    return "        push    rdx\n        mov     rdx,    rsp\n        call    " + varmaps[ast].value + "\n        add     rsp, " + str(8 * varmaps[ast].args) + "\n        push    r9"
                return "        mov     rax, rdx\n        add     rax, " + str(8  * (varmaps[ast] + 1)) + "\n        mov     rax,    [rax]\n        push    rax"
                #return "lstack " + str(varmaps[ast])
            else:
                try:
                    return self.func[ast]
                except:
                    error(f"Invalid varible, function or operator '{ast}'")

    def genCode(self, ast, varmaps=None):
        if varmaps == None: varmaps = {}
        if type(ast) == list:
            if ast[0] == "fn":
                if len(ast) < 3 or len(ast) > 3:
                    error("Syntax error: invalid function definition")
                paramlist = list(ast[1])
                code = list(ast[2])
                paramlist.reverse()
                #asm, _varmaps = self.genCode(code, varmaps={**varmaps, **{i:j for j,i in enumerate(paramlist)}})
                label = self.genNewLabel()
                func = Function(label, len(paramlist), code, {**varmaps, **{i:j for j,i in enumerate(paramlist)}})
                self.funcasm.append(func)
                return func, varmaps
            
            if ast[0] == "def":
                if len(ast) != 3:
                    error("Syntax error: Invalid variable definition")
                name = ast[1]
                val, _varmaps = self.genCode(ast[2], varmaps)
                if isinstance(val, Function):
                    varmaps[name] = val
                    return "", varmaps
                else:
                    varmaps[name] = len(varmaps) - 1  #todo make sure this is right
                    return val, varmaps

            if ast[0] == "if":
                if len(ast) == 4:
                    expr, varmaps = self.genCode(ast[1], varmaps)
                    trueside, varmaps = self.genCode(ast[2], varmaps)
                    falseside, varmaps = self.genCode(ast[3], varmaps)
                    
                    truelabel = self.genNewLabel()
                    endlabel  = self.genNewLabel()

                    return f"{expr}\n        jz      {truelabel}\n{falseside}\n        jmp     {endlabel}\n{truelabel}:\n{trueside}\n{endlabel}:", varmaps
                elif len(ast) == 3:
                    expr, varmaps = self.genCode(ast[1], varmaps)
                    trueside, varmaps = self.genCode(ast[2], varmaps)
                    endlabel  = self.genNewLabel()

                    return f"{expr}\n        jnz     {endlabel}\n{trueside}\n{endlabel}:", varmaps

                else:
                    error("Syntax error: Invalid if-statement")
                    
            x = self.expr(ast, varmaps)
            x.reverse()
            return "\n".join(x), varmaps
        return self.expr(ast, varmaps), varmaps

    def compileCode(self):
        out = ""
        varmaps = {}
        for line in self.code.split("\n"):
            if line.strip() == "": continue
            asm, varmaps = self.genCode(parse(Reader(line)), varmaps)
            out += str(asm) + "\n"

        compiled_funcs = []
        for func in self.funcasm:
            asm, varmaps = self.genCode(func.code, {**varmaps, **func.varmaps})
            compiled_funcs.append(func.value + ":\n" + asm + "\n        ret\n")
            
        return out, compiled_funcs

                
        #asmbler = assembler.Assembler(asm, definition_stackvm)
        #return asmbler.assemble()

#asm = comp("""(def x (fn (a b c) (print (+ (+ a 1) (+ (+ b 1) (+ c 1))))))
#(x 1 2 3)""")

#asm = comp("""(def asp (fn (a b) (print (+ a b))))
#(asp 999999999 1)""")
#with open("test.vm", "wb") as f:
#    f.write(assemble(asm, funcasm))

src = """(def fib (fn (n) (if (== n 0) (ret 1) (if (== n (- 0 1)) (ret 1) (ret (+ (fib (- n 1)) (fib (- n 2))))))))
(print (fib 2))
"""
#src = """(def ree (fn (a b) (if (== a b) (ret 65) (ret 66))))
#(print (ree 65 66))"""

#src = """(if (== 1 2) (print 65) (print 66))"""

c = Compiler(src)
asm, funcasm = c.compileCode()
print(header + asm + footer + print_asm + "\n\n".join(funcasm) + definitions)

"""
infile = sys.argv[1]
out = sys.argv[2]

with open(infile, "r") as f:
    source = f.read()

c = Compiler(source)
asm, funcasm = c.compileCode()
print(asm)
print("\n\n\n".join(funcasm))

assembled_bytes = assemble(asm, funcasm)
with open(out, "wb") as f:
    f.write(assembled_bytes)
"""
